Podczas laboratorium należy zbudować "mały system", pozwalający na interakcje z użytkownikami (z poziomu konsoli w wersji minimum, z poziomu okienek w wersji rozszerzonej), umożliwiający wykonywanie operacji CRUD (od ang. create, read, update and delete; pol. utwórz, odczytaj, aktualizuj i usuń) na przetwarzanych danych. Dane powinny być w jakiś sposób utrwalane. Mogą być zapisywne w plikach lub bazie danych zapisywanej do pliku (h2 czy sqlite).
Wymagane jest, by logika biznesowa systemu była oddzielona od interfejsu użytkownika. Ponadto należy obsłużyć własne wyjątki (oprócz wyjątków generowanych przez Java API).
Budowany system powinien wspierać obsługę procesu realizacji voucherów na wykorzystanie wybranej atrakcji. Oczywiście system ten będzie jedynie "przybliżeniem" rzeczywistości (nieco podobnym do "katalogu marzeń"). Aby dało się go zaimplementować przyjmujemy znaczące uproszczenia.
Zakładamy, że w procesie biorą udział następujący aktorzy: Klient, Sprzedawca, Organizator. Wymienieni aktorzy uzyskują dostęp do systemu za pośrednictwem osobnych aplikacji: KlientApp (oferującej interfejs dla Klienta), SprzedawcaApp (oferującej interfejs dla Sprzedawcy), OrganizatorApp (oferującej interfejs Organizatora).
Klient: przegląda ofertę, składa zamówienia, przegląda status zamówień i informacje dotyczące realizacji zamówienia, składa deklaracje dotyczące realizacji zamówienia (za pośrednictwem KlientApp);
Sprzedawca: redaguje ofertę, zatwierdza zamówienia i przekazuje je do realizacji, aktualizuje status zamówień (za pośrednictwem SprzedawcaApp).
Organizator: zarządza zamówieniami zgłoszonymi do realizacji, aktualizuje informacje dotyczące realizacji zamówienia (za pośrednictwem OrganizatorApp).
Powyższy opis funkcji oferowanych przez poszczególne aplikacje nie jest doskonały. Można go nieco zmodyfikować. Przypadkiem roboczym, który powinien zostać obsłużony jest wykupienie wycieczki balonem "last minute". Charakterystycze w nim jest to, że termin realizacji zamówienia nie jest z góry znany (Organizator informuje o terminie planowanego lotu - aktualizując informacje dotyczące realizacji zamówienia, Klienci powinni zadeklarować chęć udziału w wydarzeniu, Organizator w następnym kroku powinien zatwierdzić listę chętnych - aktualizują informacje dotyczące realizacji zamówienia). Zakres gromadzonych danych w systemie może być minimalny. Poniżej przedstawiono wstępny zarys modelu danych. Model ten należy zmodyfikować odpowiednio do potrzeb.
klient: id, nazwa
sprzedawca: id, nazwa
organizator: id, nazwa
oferta: id, parametry oferty
zamówienie: id_zamówienia (nadawane po dokonaniu zgłoszenia), id_klienta, id_organizatora, id_oferty, parametry zamówienia, status zamówienia, ....
Aby przetestować działanie systemu powinno dać się uruchamiać osobno: przynajmniej dwie instancje KlientApp, przynajmniej dwie instancje OrganizatorApp, jedną instancję SprzedawcaApp.
Synchronizacja pomiędzy uruchomionymi instancjami wymienionych aplikacji powinna odbywać się poprzez współdzielenie utrwalanych gdzieś danych. W przypadku zapisywania danych w systemie plików może pojawić się kłopot - system operacyjny może zablokować możliwość zapisu do danego pliku, jeśli aktualnie jest on otwarty w innej aplikacji. Wtedy może przydać się właśnie obsługa wyjątków. Generalnie - implementacja wielodostępu to bardzo trudny temat. Na potrzeby laboratorium mocno go upraszczamy (nie ma potrzeby budowania tytaj jakichś bardzo złożonych mechanizmów). W przypadku posługiwania się bazami danych zapisanymi w pliku też ten problem może wystąpić.
Pozostałe szczegóły mają być zgodne z ustaleniami poczynionymi na początku zajęć.