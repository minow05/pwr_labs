Podczas laboratorium należy zbudować aplikację o przyjaznym, graficznym interfejsie użytkownika, pozwalającą na przeglądanie danych udostępnionych w Internecie poprzez otwarte API. Aplikacja ma być zbudowana z wykorzystaniem klas SWING bądź JavaFX.
Dane powiny pochodzić z portalu GUS, na którym udostępniono parę publicznych API. Opis wystawionych interfejsów można znaleźć pod adresem: https://api-dbw.stat.gov.pl/apidocs/index.html
Proszę przeglądnąć opis API i wybrać coś interesującego do zaprezentowania. Może to być np. informacja o demografii ("id": 16, zapytanie get: https://api-dbw.stat.gov.pl/api/1.1.0/area/area-variable?id-obszaru=16&lang=pl)) czy też o migracji ludności ("id": 17). Listę obszarów tematycznych (atrybuty "id" wstawiane w zapytanie) można pobrać spod: ​/api​/1.1.0​/area​/area-area. Proszę zauważyć, że nie ze wszystkich obszarów tematycznych da się pozyskać dane.
Proszę zastanowić się nad odpowiednią wizualizacją. Należy przemyśleć, jak będzie wyglądał interfejs użytkownika (czy użyć tabel, czy też zwykłych pól tekstowych; czy użyć okna dialogowe, czy też zakładki; itp.).
Aplikacja ma być modułowa (tj. ma powstać z wykorzystaniem JPMS (ang. Java Platform Module System)), a więc powinna posiadać module-info.java z odpowiednimi wpisami. Ponadto należy zadbać o właściwe zmodyfikowanie ścieżek modułów oraz komendy uruchomieniowej. Stosunkowo prosto do aplikacji modułowych podłącza się klasy SWING. Trudniej jest z JavaFX - to osobny runtime, wymagający osobnej instalacji, a później, odpowiedniej parametryzacji wywołania wirtulnej maszyny (z modyfikacją ścieżki modułów oraz wskazaniem wykorzystanych modułów: --module-path "\path to javafx\lib" --add-modules javafx.controls,javafx.fxml).
Podczas implementacji będzie trzeba zająć się pozyskiwaniem danych poprzez API oraz ich parsowaniem.
Pozyskanie danych można zaimplementować na różne sposoby, korzystając z różnych klas dostępnych w JDK oraz w zewnętrznych bibliotekach. Na stronie: https://www.wiremock.io/post/java-http-client-comparison przedstawiono porównanie popularnych klientów, zaś na stronie: https://www.baeldung.com/java-9-http-client opisano, jak użyć HTTPClient (dostępny w JDK).
Parsowanie danych może odbywać się z wykorzystaniem bibliotek do przetwarzania danych w formacie JSON. Krótki tutorial dotyczący tego tematu zajduje się pod adresem: https://www.baeldung.com/java-json.
Implementując aplikację proszę rozdzielić ją na dwie części, budowane do osobnych plików jar:
lab04_client - ta część odpowiadać ma za logikę biznesową (wysyłanie zapytań, parsowanie odpowiedzi),
lab04_gui - ta część odpowiadać ma za graficzny interfejs użytkownika (wizualizuje dane, korzysta z lab04_client).

Proszę zwrócić uwagę na regulamin serwisów. Zwykle pojawiają się w nim jakieś ograniczenia co do liczby wysyłanych zapytań. W przypadku wskazanego serwisu ograniczenia są następujące: anonimowy użytkownik (niezalogowany) może wykonać do 5 żądań na sekundę, 100 żądań na 15 minut, 1000 żądań na 12 godzin, 10000 żądań na 7 dni. Jeśli te ograniczenia zostaną złamane, dostarczyciel serwisu może "zbanować" klienta, który wysłał zapytania. Tak więc proszę zachować umiar przy wykonywaniu testów połączeń.
Pozostałe szczegóły mają być zgodne z ustaleniami poczynionymi na początku zajęć.
Pomocnicze linki:
https://www.baeldung.com/java-org-json
https://www.codejava.net/ides/intellij/create-multi-module-maven-project-intellij